#ifdef RENDER_SOLO
#   include "sque_render.h"
#else
#   include "squelib.h"
#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// VERTEX ATTRIBUTE MANAGEMENT ///////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
SQUE_VertAttrib::SQUE_VertAttrib() :
    id(0), var_type(SQUE_FLOAT),
    num_comp(0), normalize(false),
    var_size(4), offset(0)
{}

SQUE_VertAttrib::SQUE_VertAttrib(const char* name_, int32_t var_type_, bool normalize_, uint16_t num_components) :
    id(0), var_type(var_type_), num_comp(num_components), 
    normalize(normalize_), offset(0)
{   
    var_size = SQUE_VarGetSize(var_type);
    memcpy(name, name_, strlen(name_));
}

uint16_t SQUE_VERTEX_ATTRIBUTE_GetSize(uint16_t vertex_size, uint16_t num_components) { return num_components * vertex_size; }

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// MESH MANAGEMENT ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTORS / DESTRUCTORS ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

SQUE_Mesh::SQUE_Mesh() : draw_config(SQUE_POINTS), draw_mode(SQUE_STATIC_DRAW),
    attribute_object(0), vert_id(0), num_verts(0), index_id(0),
    num_index(0), index_var(SQUE_UINT), index_var_size(4)
{}

//SQUE_Mesh::~SQUE_Mesh() { if(vert_id > 0) CleanUp(); }

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// USAGE FUNCTIONS ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// CHANGING DATA DYNAMICALLY /////////////////////////////////////////////////////////////////////////////
void SQUE_MESH_SetDrawConfig(SQUE_Mesh& mesh, int32_t draw_config_, int32_t draw_mode_)
{
    mesh.draw_config = draw_config_;
    mesh.draw_mode = draw_mode_;
}
void SQUE_MESH_SetVertData(SQUE_Mesh& mesh, uint32_t num_verts_)
{
    mesh.num_verts = num_verts_;
}

void SQUE_MESH_SetIndexData(SQUE_Mesh& mesh, uint32_t num_index_, uint32_t index_var_)
{
    mesh.num_index = num_index_;
    mesh.index_var = index_var_;
    mesh.index_var_size = SQUE_VarGetSize(index_var_);

    // Send indices to GPU
}

void SQUE_MESH_SetLocations(SQUE_Mesh& mesh)
{
    sque_free_vec<SQUE_VertAttrib>& v_attribs = mesh.attributes;

    for (uint32_t i = 0; i < v_attribs.size(); ++i)
    {
        v_attribs[i].offset = mesh.vertex_size;
        mesh.vertex_size += v_attribs[i].var_size * v_attribs[i].num_comp;
    }

    for (uint32_t i = 0; i < v_attribs.size(); ++i)
    {
        v_attribs[i].id = i;
        SQUE_MESH_EnableAttribute(mesh.vertex_size, v_attribs[i]);
    }
}

// Getters ///////////////////////////////////////////////////////////////////////////////////////////////
uint16_t SQUE_MESH_CalcVertSize(SQUE_Mesh& mesh)
{
    sque_free_vec<SQUE_VertAttrib>& v_attribs = mesh.attributes;

    for (uint32_t i = 0; i < v_attribs.size(); ++i)
        mesh.vertex_size += v_attribs[i].var_size * v_attribs[i].num_comp;

    return mesh.vertex_size;
}

uint16_t SQUE_MESH_GetAttribSize(SQUE_Mesh& mesh, const char* name)
{
    sque_free_vec<SQUE_VertAttrib>& v_attribs = mesh.attributes;

    for (uint32_t i = 0; i < v_attribs.size(); ++i)
        if(strcmp(v_attribs[i].name, name) == 0)  
            return v_attribs[i].var_size * v_attribs[i].num_comp;
    return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// TEXTURE ATTRIBUTES MANAGEMENT /////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTORS / DESTRUCTORS ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

SQUE_TexAttrib::SQUE_TexAttrib()
{}

SQUE_TexAttrib::SQUE_TexAttrib(const char* _name, int32_t attrib_id, int32_t value)
{
    memcpy(name, _name, strlen(_name));
    type = SQUE_INT;
    id = attrib_id;
    data = (void*)new int(value);
}

SQUE_TexAttrib::SQUE_TexAttrib(const char* _name, int32_t attrib_id, float value)
{
    memcpy(name, _name, strlen(_name));
    type = SQUE_FLOAT;
    id = attrib_id;
    data = (void*)new float(value);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// TEXTURE MANAGEMENT ////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONSTRUCTORS / DESTRUCTORS ////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////

void SQUE_TEXTURE_SetFormat(SQUE_Texture* texture, const int32_t dimentions_f, const int32_t use_f, const int32_t data_f, const int32_t var_type)
{
    texture->dim_format = dimentions_f;
    texture->use_format = use_f;
    texture->data_format = data_f;
    texture->var_type = var_type;
    texture->var_size = SQUE_VarGetSize(var_type);
}

